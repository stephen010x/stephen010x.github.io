
Ideas for the game.

So when flying away from massive distant objects, the ship actually flies both away and out from the planet, so it remains on screen, but gets farther and farther away.
I think all collisions are maintained. The player still travels on the same axis


Take some inspiration from Spaceflight Simulator, and how it designed the world as if it was a 3D object, and we can just land on a plane of it.

I should have three planes. The foreground plane, the middleground plane (player's plane), and the background plane.

Asteroids will still (probably) not scale like the planets. 


The thing is, that I can't implement a frictionless spaceflight system unless the player can see all obsticles ahead of them.
It very well may be more pleasing to have space normally extended in-front of you. But if I do that, I will have to cap player speed.

I can still make it frictionless, or relatively frictionless. But I can't have the player go whatever speed they want.

If I want to have the player go lightspeeds, then perhaps disable all small enough objects, and then zoom out a lot. 


I wonder if I should add a car mode for driving on planets....
Say.... What if I made the whole planet an open world for driving in a car. (So you can fly in space, and then drive on land, and then perhaps also swim in water)

I should not make it combat based, but instead have it be exploration and ecological based, where you chart the universe, figure out the orbit of planets, discover new species, etc. You start out with a blank map of the solar system, and then explore from there. (Though, I will want to create ways for the player to find planets.)

I kind of have to consider here the advantage of non-distant objects. The thing is, that it would be nice to provide a sort of background imagery and whatnot.


I should make turning slower when thruster is on. (It will make high speed turning more intuitive, especially if it is hard to see which direction your ship is pointing.

I should have forward particles that are closer to the camera, and speed past the camera faster than the middleground. It will really give a 3D aesthetic to it. 
If I can, I should make it transparent. If not, then perhaps use a circle dot transparency method.

If possible, make it so that jet streams vary in transparency and size. 

Bubble gradients would make for a really cool aesthetic theme. Expecially if we can see them slowly shrink and whatnot for something like the jetstream

Maybe I can make the jetstream a sort of weapon or tool.

It would be cool if the jetstream was a liquid paint that could paint other objects. And imagine enemies that hunt you that you could just push away or blind with your paint.


I suddenly want a place where you can collect orbs, all of them physics based. 


Due to the new stream mechanics, (which is really satisfying), it would be a shame to eliminate speed turning. I should make it so that the player can turn faster simply when the stream isn't on, and to be able to maintain that turn speed when the stream is reignighted. That way I can technically have both mechanics, and make it more skill based. Though the speed cap is now low enough that maybe I can just have the player turn slow when going fast and the stream is on.


It would be cool if the player is capable of navigating without a minimap, and without markers. That zoom out planet idea is a fun idea. 

I should probably add relative and objective layers.

I should add layers to the world, rather than to the objects. That sounds much more like an efficient layering. I will probably start with 3 objective layers, then 1 subjective layer behind them all.

I wonder if I can use the star particles to give the illusion of the player flying towards a planet to explain why it is getting bigger. It probably wouldn't be hard to do if I implement a zoom mechanic, as I can just add the stars to the subjective layer, or even their own special layer, and just have their modulous be a 3 dimensional modulous. That way they actually move around like in a 3D world.

Should a world always be in view of the player? Or perhaps should they only become subjective once you leave their atmosphere?

Add a paint ring around one of the planets. It would be cool if the paint ring was an actual paint ring that you had to swim through to bypass.


The planets aren't subject to objective friction, though the player is. So I should probably make it so that either the planets stay still, or so that the player inherits the velocity of the planet as objective space. 
Though honestly, I can't really see much use of simulated planets. So I will probably have the planets be motionless.


Okay, now it is time to come to a consensus about positioning. 
I am now having to deal with x,y,z positioning. I would prefer keep things as an array, with the z position excluded, and then to just include that when putting it into the camera. Which I guess may work, as the camera returns an object, not modifies it. 
I should include in the parent simulatable class a way to convert points to 

For overhead meteors that go above the camera (or for any object that goes above the camera) I should just draw them as shadows (scaled to size of zoom).
It would really only be prevalent if there are meteorites on the same plane to catch the shadow. Though it would be really cool if the planet's ring casts a shadow on the planet. Also if the player casts a shadow on underside meteorites (which I can just darken to show that they are just background elements)

Paint splatters should just be spheres or circles. 


If I add spheres as collectables, DO NOT MAKE THEM COMMON AND SCATTERED. Because then it will turn into a grind game. Rather, make them rare to locate, but can be found in large quantities. It is much more rewarding, and much less of a grind to do it that way. 

And adding creatures to this world still seems like a good idea. I should add space creatures too, like perhaps a really spindle looking jellyfish (an alien looking jellyfish)

I should also add snarkers to kind of seem like clustered space fish.

I should have meteorite clusters be rare. That way encounters are less common, allowing for peaceful space flying moments.

I wonder if I should add harmful creatures that will attack you unless you figure out how to "tame" them.


On the note of what to do for data, I think it is probably a good idea to just have this be arrays. (Though, I should probably look into how much data this would even take, which may not be all that much)

And then I will perhaps convert everything in the main draw function. I think I was planning to put the format loop within the draw rather than outsourcing it to an array or camera prototype.


For networking, I should probably just have a player simply be able to host their own game, and to give other's their IP.
And as for save data, I should perhaps have literal savefiles, and cookies. Cookies for temporary saves, and savefiles for permanant saves. 

Anyway, a hosted game will be pretty lax on security. Mostly because this game is meant to be played with friends, and is for fun. So the only thing that the host will handle is simply letting everyone in the game know and see where everyone is. 
I suppose there is also the case of synchronizing certain elements of the game, which sounds a bit more prone to lag.

At the same time, it doesn't sound hard to host a server document that is able to change itself, kind of like the cloud. I imagine something like google docs. 


You know, 
For the steam, instead of creating a bunch of points to create the stream, I could just use a curved line that only piecewises whenever the player changes direction or thrust.

I could maybe even just do some math to ensure it is similar to the points by just having a line solver, and whenever the error for the line exceeds a certain amount, or if the player turns in a way that would create a sharp corner (which very well may be within the domain of the error), then it creates a new line. 
So basically it will create points, but the points aren't what are drawn. Rather the points are used to create a line to represent the points. And the list of points is reset once the most recent line breaks off into a new one.


After flying around a bit in the demo, I was thinking how fun it would be to have permanant retention on jetstreams. (Well, permanant enough to do what I want them to do)
See, what made them rather fun, other than being able to paint space, is that I can retrace mysteps using my trail to find out where I used to be. And honestly it is kind of fun following my own trail to make it to the end.
At the very least, setting up a curve for the lines will save a ton of memory and processing, because once they leave the screen, their accuracy isn't nearly as important. 

I wonder if I should have them collide with the player as well. This is mostly in response to when the player makes a mess, and how it can be an eyesore if permanantly there. 

Oh. What would make this really fun is following the streams of other players. Not so much unknown players, but if these players were your friends, and you were trying to find them. And their streams are different colors.
I wonder how gravity will mess up these strings. Actually, I think due to the nature of my game, there is no gravity until you enter the atmosphere.

It would be kind of funny though to have meteorites mess up your string path. Though something like that would probably have to be pre-generated, as it would be too costly to compute for everything.

I wonder if I should scale the other players and their streams with the planets, so that it may be possible to see them leave a distant planet or whatnot.



I am thinking, for global function methods that really are only to be used for one object (are specilized), then I should include them in the module it should be used in.




Permanantly retaining streams is actually really fun.
Also, I should consider having the streams adjust themselves as if they were string so as to eliminate high turn curves, so as to allow bigger line fitting curves. Though the real reason I want to add this is that it may make it look better in the long run.
Also consider some other optimiations, because once the string gets long enough, it does start to slow down the game more and more. It really isn't noticable unless you let go a long line, which frees up the frame rate. 

Also, turns out the terrible random spikes in the fps was not my own code, but rather my computer, being mostly firefox, and perhaps a bit of cold turkey.



I suddenly really like the idea of having a star-dust distribution. Therefore, it will ultimately be better to just generate the stars. 
Also, the modulous doesn't really work when I want to generate stars using a literal modulous rather than a camera modulous. 
But ultimately, for both of those reasons, it would be better to just generate the stars using a formula. Preferrably no randomness, that way going back to the same place will yield the exact same stars. 
I could even add an easter egg of stars that draw a picture when in a certain place. 


I should focus on particles in this game to give it a lot of it's fun aesthetic. 

I imagine space having just sometimes these cluser of particles that create dust clouds
And the algorithm that generates it will be a non-randomized 3D generation algorithm that spawns the particles when within the view-window, and despawns then when they leave the view-window. And what will manage the fact that there is technically an infinit number of particles in the view-window due to distance will be two things. The first is particle transparency, and the other is particle anti-aliasing approximation. The first will dim particles if they are too close, as transparent particles when too close will appear more translucent. And transparent particles if they are too far will anti-alias out of existance. And I could also artificially increase the intensity of the anti-aliasing to reduce the background particles if there are too many. And when they are dim enough I can just despawn them as well. 

But what I mean by focusing on particles is to create fun and unique particles that exist on every planet. 
For example, imagine a sort of rain world where the raindrops are much bigger than stardust. Like, perhaps it would take only three or five to fill up your ship. And high in the atmosphere they just twirl around in pretty circles as if being suspended by wind until they are large enough to drop. And in the middle of the atmosphere it is a mix of suspended drops and falling drops, and at the bottom it is all falling drops.


Planets should have mountainous terrain to act as middleground interactables and background decorations


I should have paint splatter on the player, and to have it move depending on the change of velocity of the player. And to basically draw them as circles with triangles to look like droplets of paint. 


I should have many of the particles in other worlds be paint particles. Imagine the water world is actually just paint that gets stuck on the player. Or what if it is all paint?


Imagine one world, perhaps the rain world, where water droplets on the ground have an anti-gravity effect that is similar to condensation, where basically.


Underwater should have currents to make up for the lack of terrain. (Though I suppose water can still have terrain obsticles if the underwater zone was cave-like.


Imagine simulated waves for liquids, and with surface tension so that you create a sort of wave when leaving an ocean or something.


I should have some monsters try to attack you, or some just grab you. But the player will ultimately learn that they are invincible, and turn monsters like a scary leviathan that dwells in space, and make it kind of humorous as it tries to chew on you with no progress.



I should add blood in the game. Like the blood of a creature that you accidentally run into on space. 



If I ever decide to make a 3D game version of this, I should 



Anyway, remember to make the planets appear somewhat 3D in appearance. So falling raindrops can also be a background or foreground thing, and they interact the ground in different places.

I wonder if I should add caves inside the planet that still make the shapeship relevant. Basiacally that are still vertical rather than horizontal on the planet.

Mountains and terrain in the middle of the mountain will really only act as obsticles for the player. I can imagine some worlds having plenty of obsticles to make it interesting.


If I decide to not add mining into the game, I should at least make it so that the player can sink into the ground if going fast enough or really at any reasonable speed to be able to sink into stuff, as well as even break through them. Kind of like mud in some places.


Unless the whole planet is water, I should probably not give the player access to the core, unless they enter an underwater cave or dry cave. Because otherwise the player will be able to leave the water at all sides to go to dry land, which means that there would be places where you could see the core or super deep ocean on dry land. 

Ahah, I have an idea for that. Basically, the player will never be able to submerge below a certain depth, (thematically speaking, as it is actually just x and y, with z being an aesthetic thing). So even though the player can enter darker areas, they technically are the same depth. That means that there will be ground underneath the player that is basically the bottom of the sea floor. And only when the player enters closed areas like caves and whatnot are they actually vertically submerging themselves rather than just horizontally moving through the ocean.
I am thinking that caves are all the same thing, and can optionally be submerged or not. I may just have water areas in caves simply be spherical.


What would potentially make caves worth exploring is simply the idea of creating a map for the caves. 

It would be even more fun if this was a friendly multiplayer, or even an mmo, where basically the players try to find places that have yet to be explored, and go there. 

I should probably add another motive for exploring. Either I can add stuff like loot, or new creatures, or I can perhaps make it so that the player earns some sort of currency for exploring new places and finding new creatures. The latter seems like a cool idea. 


I probably shouldn't have an endless generation of planets or creatures. Because if I make the goal of the game to explore and find new creatures, at some point that will loose meaning if it can never be finished, unless somehow the player is impressed by the terrain and the creatures constantly. (Basically where the reward is the coolness factor)


If I decide to add any obstructing overhead objects (basically layers that overlay the player and are in front of the camera), then I should just create a shadow outline of the player to denote where they are. 




To-do
-------
player/particle interactivity through air friction
pvp duel anywhere (follow trails. Hide and seek)
Old trails
world boundry
Escaping a world


So the coolest idea that I just came up with, that would make this game so fun, is a duel feature. 
Basically, the duel feature is a multiplayer feature that both players have to accept. The person creating the duel will customize the duel, and the other person just has to accept it. And you don't have to be nearby any of the players to give them a duel. A duel can start, and the other person is on the far side of the map. 
Anyway, the goal of the duel is simple, get your paint on the other person, and you win. And there are several factors that can turn this into a highly strategic game. The first is using your own paint trails to block your opponent's trails. Another is trapping your opponent with your paint trail (depending on whether or not I make it so that your own paint trail can break through another paint trail. Perhaps I can make that an option of the duel, where newer paint trails will destroy old ones.)
The second item of strategy is simply location. It sounds like it would be really fun to have to try to track down your opponent using paint trails to attack them. 

Ooh. A three or four person duel sounds fun.

Anyway, I plan to add customizable options, rather than gameplay modes, so as to allow for the player to basically just do whatever gamemode they can think of. Unless it isn't obvious enough that there is a hide and seek mode. So maybe I can have presets. 
Anyway, in a mode like hide and seek mode, one player has dominant paint (it destroy's the other's paint), and that player has to get their paint on the other. I don't plan on adding a timer, at least on the default mode, and to instead just add options that will count up the amount of time it took to find the other person, and then add that to a sort of score for the match. And perhaps they can swap back and forth. I can perhaps add a # of rounds option, as well as an option between turn swapping and turn randomization, which will complete this as a full match game. Though I will probably not allow for dynamic settings in a match, and require them to create a new game if they want to change modes. 



Something else I want to add is a way to tell when trails are old, and when trails are fresh. 
I was thinking a few things, such as vibrancy of color (which is so far my favorite one), or perhaps transparency, as well as perhaps coherency. 
I like the idea of a trail getting more dull of a color the older it gets, as well as the idea of it being broken up over time.
I should also have old trails have a different consistancy, where breaking through them is like breaking through a non-adhesive syrup or liquid rubber. Or perhaps even have it so that it can harden and you have to break through it. Though I like the liquid rubber idea more. 


Also, I want to make it so that stardust is a bit more interactable than just particles you fly by. It would be cool to have a sort of air thing where flying through them will cause the particles to spin around like you would see in dust particles in real air as something whizzes past it. Since the particles are generative, I may just create a player trail that is itterated through, each with a lifetime, which will then be applied to a formula to determine where the surrounding particles are in each frame.
Then again, since the dust is spawned in, I could perhaps just simulate it normally. The only issue is when it leaves the screen. So an invisable player trail may be useful to act as a spawn modifier.


I wonder if I should have particles also interact with the ship. For example, on a rain world with these giant raindrops, it would be interesting if each raindrop were to push the ship down with it. And in heavy enough storms, it could prevent you from leaving the atmosphere. It would be interesting to have to wait for deacent weather to leave a planet. 

Actually, that sounds like a really fun idea to add to the game, which is to make it so that you can sometimes become trapped on a planet, and you have to figure out how to leave. 
That could actually create some really fun scenarios in the game. Perhaps take a bit of inspiration from Outer Wilds.
There could be particle obsticles, there could be animals that are keeping you trapped in a cave. There could be windy planets that have updrafts on the poles that allow for escape. Though those are all locational sort of things. I wonder if there are more interactive or softly upgradable ways to escape or solve such a problem. 

Imagine a planet spinning fast enough that it is difficult to stay on it. And you have to find a way into a cave. (Though that would require me to add some relative physics which may be best to leave alone for this game)

Oh, maybe I should take some inspiration from that one saucer game where you are a ball on land, and can sometimes turn into a saucer to fly and whatnot. It is basically a momentum game, and it sounds like a cool idea for trying to escape a planet. 


I wonder if I should add slingshot nodes that are sort of like black holes. Basically you will have to be careful trying to sling yourself in the right direction. But what really makes them useful is that they increase your max speed, which slowly gets dragged back down by friction. That means that while your max speed is high, you can use your engines to redirect yourself in a different direction at much higher speeds. Though I am thinking one should be careful slowing down, as lowering your current speed will also lower your max speed, the way I want to implement this. But flying perpendicularly won't lower your max speed due to your own fault. But flying straight will keep your max speed higher for longer. 
But I have to consider for this if I want to give players this, or to just let them fly around at normal speeds as intended.  


It would be cool for permapaint to see your mark left on planets if you have went to them often enough that your paint is visable from space. 


I shouldn't reward players for killing animals. It is more of a "slap of reality" feature. And I am quite fond of those sorts of things. It adds a sort of lesson to a game that is generally depicted as cute and artsy, which is that it isn't entierly that. 


For the rover, I wonder if I should make it a rover, or perhaps have it be spider legs. Or something else that fits the aesthetics of this game.


Imagine a slingshot screen where basically it looks like space was warped between our two splitscreen players in order to divide the screen between them. 


Lets see... How do I achieve random generation?
I suppose I simply need to give the generator a range of positions, and it will generate from there. The range will generally be the position and size of the screen subtracted by what is already there. 
Though, that does run into the issue of merging the x and y generation. (And we musn't forget about the z generation.

How would I go about this if this was a random generator? It is basically the same thing, except swap out the random function for a normal function
Honestly though, I don't know if there is any way around it except to determine the new screenspace, which sounds like a pain. It will generally be two rectangle ranges. One the x axis and one the y. I will probably make the x one dominant, and the y submissive. And I guess the last thing would be to determine which side of the screen.
To do this, I suppose I would want to remember the current rectangle generation. 


for the generation itself, I suppose from a range I would need to determine how many stars will be in that space. I have my probability distribution formula, sort of. I guess it is less of a distribution formula and more of a mass distribution formula.

Lets now just worry about populating a square with procedural dust. How would I do that?
Let us start with random. 


Well, lets populate a scene with uniform dots. Then lets simply just shift these dots. First these dots will be shifted through my distribution formula. And then I need to shift these dots to make them seem random.
I suppose the random will technically be merged with the distribution spatial shift. All I need is a seed random generator, and a way to reverse it.

Lets say I have a function that determines how many stars in a given range. And then we itterate over the number given with the range as function modifiers. And if the function is designed correctly, it will output all of the stars in the correct place. 
So how do I guarentee that the function will always place it correctly within a range?

You know what, lets just save that problem for another time and just have it be random. We will receive a range, figure out the number of stars in that range, place the stars using the random formula, and then there we go.
I can have star twirling still be a thing too, and just to modify the stars using the player path.
How do I dtermine the number of stars though? I could integrate (because that sounds like a good idea)
Maybe, since this is a frame-by-frame thing, I can just increase the rate of spawn in certain areas. Actually that is not a good idea. Nevermind.


What if I were to actually treat these as uniform placements with a noise distribution function?

Also, I suddenly love the idea of a 3D perlin noise generator. 
I will probably do this in chunks because I am annoyed. But I am thinking of having a 3D perlin noise distribution, generated in chunks, with a much larger perlin distribution overlaying that. The lower will be more obvious on the screen, and the higher will be more obvious when flying large distances. 


You know, one potential advantage of using perlin noise on evenly distributed points is the fact that I can put the evenly distributed points in a 2D array, and then use the position of the screen to determine which to actually render and simulate. So despite there being grid sections generated, that is more of a memory issue than a processing issue, which is hopefully fine. 
And then each grid position can represent a point for the higher up perlin noise generator. Generally speaking, the smaller perlin noise will be 3D, while the higher up perlin will be 2D.


Well I've got it. And I feel stupid for not getting it earlier. Instead of a uniform distribution, just use a random distribution, and then apply the noise. I will have to look for optimizations later. 
Also I should either randomly generate the perlin vectors, or I need to just pre-generate it or something. And also design it to wrap around (where all the edges of each chunk basically share the same vectors. I guess that shouldn't be too hard.)
And I realize that applying 2D vectors 


You know, I wonder if anyone would realize if I reuse the same randomly generated points, and perhaps change one or a few of them each frame. Now that would be a good time saver. Then again, I don't want to use the same perlin as well. And if I am doing one, I may as well do the other. 


One technique I should try that would be a ginormous simplifier would be to use the same number of points, but to despawn them when they leave the screen, and to respawn them in a chunk outside the frame. 


I think I forgot about the implications of deleting stars from a list.
I can just create a buffer of empty spots for stars, which new stars can then reference to replace themselves. However, that would require occasional garbage collecting, which just does not sound like fun.
Being able to delete chunks sounds like a good idea, or really just whatever will hand off the work to javascript's native garbage collector.
Then again, a garbage collector may not be neccissary. Worst case scenario the star list will double in size (which I guess does sound pretty bad)
Maybe I can just revisit the idea of reusing stars (though that would mess up the fact that my intended distribution will vary the number of stars on-screen)
Chunks may just be the way to go about this, unfortunately. I suppose there is some sort of optimization that can be very useful with this. Particularly how I have now organized my stars, and can now decide which chunks to check for collisions, which to draw, and which to evaluate.
I am thinking of making chunks smaller than the screen, like perhaps make chunks a static literal size.
Also remember that these are 3D chunks. Should I make the z axis of a chunk finite?
I guess I will just do 1x1x1 for now. 


Chunks are generative, meaning they are not stored. Any storative chunks will probably have to be much larger so that it won't overflow memory (as I would need to create a datamember to store all chunks)

Though, what if I just use a binary selector chunk system. I mean, any storative chunks are likely only places that the player has interacted with. So I can just have chunks not be positional, but rather heiarichal, where when the player class tries to find the chunk it is in, it will check a group of the largest existing chunks, and then search that chunk for the existing chunks, all the way down to it's own chunk.
And of course, I can make it so that the player actually searches the smallest chunk space it was last in, and if not there, it will search the one higher up, and so on. And only will it search from the top down if it isn't in any chunks.


I need to establish chunk prototype values. I can do that, right? 

Just so that deleting a chunk will delete everything inside it, I should have the chunk store items, and to render and evaluate them when it, itself is rendered and evaluated. 
Also, while chunks can be placed in render and logic layers, I should have it only have it's own self contained render and logic layer. 
Actually, I have an idea on how to handle the difference between logic and render items in a chunk.

Instead of giving a chunk both a render and an update list, it will just have an item list, and basically the world will determine which chunks are to be rendered or updated, as everything within a chunk should be the same.

Oh dear, I think I already discovered a substantial issue, which is the fact that there would never just be a single chunk to fill the screen, but rather there would be perhaps a dozen, simply due to the distance perspective. First of all, that is a lot of stars that just isn't being rendered. I think I can combat this by using small enough chunks, which hopefully won't effect the quality of my stars. 

Oh. Or.... I just create layers with a smaller z depth.

Ohh.... Don't forget to reduce the dim-ness of the stars, or at least the trail of the stars as you are moving. (Unless I want the luminocity of the stars to increase with greater speed, as has incidentally been the case.)


So something about the perlin noise I want to implement, is that if I want it to be noticable, it has to be applied to a great enough quantity of stars. And these stars will likely be spread somewhat thin. 
And while driving through the chunk tower I made for testing, I am thinking I should make the perlin distribution larger, perhaps even with a square size the same as a chunk. It should both look cool, as well as actually noticable.
Notice that the perlin noise can be independant, so I should probably do that. 

Also, it looks like three chunks of a z-width of 1 is a good render distance. 


Okay, so something about this vs the demo version, is that the demo has way less background particles, and also has more distant particles.
Part of this may be because of the distribution I added in the demo to make it more likely to be closer to the player than farther away. 
Now, I can potentially emulate this through star luminocity.

Also, maybe the ideal depth was 2.5



I wonder if I should create sections called "pillers of light" which are basically just star pillers like with my tests with large stardust piller chunks. Of course, I could apply this to another particle. 


Should I make light the same thing as opacity?
I suppose not, as stardust should have different values of light that isn't simply opaque. 




Okay, for the initial spawn, the math seems pretty simple. Basically we first figure out the number of z-wise layers, which is probably pre-determined, which would force the next one to spawn only when the last one despawns. The closest layer is the priority one, meaning it only ever is despawned when behind the camera. 
Next we itterate over every x and y chunk on that layer, which is simple to calculate. It is essentially the largest screen viewport on that layer (the bottom of the layer), and dividing without remainder with the size of the chunk, and just add one on one of the sides. 

Now, as for determining when to spawn a new chunk, I figure I can do this one of two ways. Either I can create a buffer of all of the edge chunks that remove themselves once occupied on both sides, or I can just check every chunk.
Honestly, it doesn't seem worth it. I will check every chunk. There doesn't seem to be much harm in it. So basically, I guess, I will check every chunk to see if they are outside of the screen for removal. Though checking for empty spots seems more difficult. I suppose I could have the sum dimensions of a chunk layer, and I can use that sum dimension to calculate when new chunks need to be added. 

This is an optimization that may be too much hassle, but I wonder if I were to have this layer be a 2D stack array, where basically if the player is moving one way, then the stack replaces elements in one direction, but if the player is moving the other way, then the stack replaces elements in the other direction.
The only reason this would fall apart is the need for a dynamic array, created by z-axis movement. And increasing the size from the middle of a 2D stack array sounds annoying. Honestly a dynamic 2D stack array already sounds annoying by itself.


You know what idea I am already starting to reconsider? The one where stars despawn immediataly once outside the screen and spawn on the outside edges of the screen. No reusal due to the fact that the star count is dynamic.


Now here's this, 
I suppose if I am going with the chunk option, I will need to have a chunk that determines it's own literal width and height, which only updates when a chunk is added onto or removed from. I will probably need to create a 3D array for all this. One is the z layer, the other the x layer, and the last is the y layer. (z is priority, and x is just larger).
Now, the first question, will these arrays be ordered by position? They are only removed from when 
If I were to do a 3D stack array, the start and the end of the array would be where the stack pointer was. 
(Also, the three different xyz stack pointers would only need to be stored in the parent 3D array, as every axis row or column will share the same pointer as those on the same axis. 
So the only real issue is pushing or removing elements into the middle of an array (the beginning or end of a stack), which hopefully won't be all that bad. 

Note that a distribution like perlin noise could potentially push a star outside of a chunk, which is okay. If it becomes a noticable problem, then we can just expand the chunks a little bit, as it is only a noticable problem when it comes to spawning and despawning them on the screen.


Also, a reason that really pushes me over the edge with this stack pointer idea is the fact that it is super easy to calculate the layer width and height now, as the start and end chunk is literally on both sides of the stack pointer. 



Also, I can use the function to convert literal to screen position in order to determine if a new chunk is required.



I think I will want to find a way to make my stars appear brighter. 
And if possible, a way to add more stars.
I mean, considering that I have more functionality I can use with my own hosted processing game, I also have access to the graphics card if I ever get around to figuring out how to use that. 
But I potentially can just generate layered images off-screen of the stars. and if feasable with certain distributions like the perlin noise, I can maybe even reuse chunk images. (Also, that would probably only benefit memory size anyway, so don't worry too much about it.)
I suppose on the lower graphic level though, individual stars would potentially be more efficient than generated images. 





You know, the idea of haiving a noise distribution, likely other than perlin noise, that sort of mixes between random noise and organized noise sounds like an interesting idea. 
 
