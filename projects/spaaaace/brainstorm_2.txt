
Add a bunch of mechanics involving the jet stream that 
add a high skill ceiling to the game.
Well, nto a high skill ceiling, just a lot of tricks
that you can figure out to better play the game that kind of
just naturally integrate or combine.

For isntance, if I get rid of the speed ceiling, slowing down
might be hard. 
However, The jet stream you send behind you, if you collide into
it, will slow you down much faster, leading to tricks to 
slow you down really quickly

It would be cool if there are also tricks to use the stream 
to boost your speed, adding a high skill ceiling to 
manuverability.


I should create a noise lookup table that makes it so that I
can just use the lookup table to determine the offset of the
point created by the noise.

Alternatively, I can create a point without having to
probabilistically iterate by sampling two perlin noise
points, or I guess three, and then determine a vector
to offset the point

Alternatively, I should test how it looks to directly use
3D perlin noise as the particle offset. Where I sample 3
perlin noises for the x, y, and z offset.



Alright. I need a new plan for the formulas for the planets.
First of all, don't make too small of planets too far away. It causes problems
In fact, add a safety that makes it so that the spacship won't even attempt to fly towards
planets that are too small.

Actually, I can still see that being moderately useful. So you can still fly towards
planets that are small enough unless there are closer ones that override it.
And I would need to make a smooth transition between overlapping planets, which sounds
problematic, so add more consideration to this.

Anyway, the formula version isn't working. Now we move on to something else.
Basically, lets break this down into the fundamentals. 




Lets switch to a hopefully simple solution here. 
Basically, cones. The player will travel upon cones.
The player will chose the cone path that is the highest up.
And it will ignore it when a cone goes beyond the max boundry.
This way, it is both deterministic, as well as properly
transitions between two planet cones
This can be made smoother by selecting two points offset from the player
that are parallel to the line between the two planets, and then, well...
Basically we are averaging the slope of two points near the player.
For now though, just generic cones.

Actually, it can't simply be the highest cone. Because that would cause problems.
It somehow just needs to be a place where the cones converge.
I think it is possible to assume that we will never encounter three cones
converging at once. Simply because in a non-discrete world, that is impossible.
I think the solution is to simply select the lowest one rather than the highest
one. The worst this will do is override closer planets with farther ones.

Oh! I think one  major problem is simply the player speed.
I should slow down their x and y speed such that the z doesn't
feel way too zoomie.
That, and a balanced cone such that you can always see your target planet.


I should add a button that sort of "zooms" the player out so that they can see more



FEATURES TO ADD:
------------------
- Jet stream:
	- Cull uneccissary points
	- Fake brightness
	- Brightness, then blue, then gradually dims to grey
	- Expands then skrinks, making it feel more like thruster
		exhaust
	- Don't make it dissapear. Just add a max polygon limit tied
		to transparency
- Triangle stars
	- stars move when you pass them? (not sure how to pull that off)
- planets:
	- Planet gravity. Give weight to planet take offs
	- planet atmosphere
	- plane burns in atmosphere when it goes too fast
- Smoother z-plane
- Change speed limits.
- Add fuel
- Add zoom
- Pause execution when not focused



You know, I can probably heavily optimize the slowest thing in the game, the trail,
By simply having them split into a new stream every time my character turns.
(So pressing right would start a new trail, and then releasing right would start another)
(Which would be fine if I disable them dissapearing.)
That way I can either assign a box size to them, or just test several points
within it to determine whether or not it is within the screen and should be rendered.
That, combined with the polygon reduction (which by the way, should just be done
to the entire stream by a dedicated loop once the entire thing has exited physics
status)
Also it should just generally be faster by javascript standards when needing to
remove an item from a list. It doesn't need to adjust the entire thing.

Honestly, with how my contrails now work, being separated by each change in rotation,
It would probably work just fine to simply test both end points to see if it is either
rendered on screen, and also, to just render it as a simple line if far enough away.
I will probably need to either duplicate points or somehow fake a connection
between two different connected streams


Consider object pooling for optimization



I should call the trail optimizer call "petrify()"
I am realizing I should only optimize it after the stream is completely dead
including colors. Because gradient color changes might not look good otherwise.
Although, if the color change is gradient enough, then it is probably fine.
In which case I could have two stages. The first is to petrify, which culls
polygons, which happens as soon as a stream stopped moving.
And the second is to just when it's colors has completely died down, and
it's gradient behavior killed.
On that note, I can just make the stream itself gradient rather than each 
individual polygon/point. It would make it a lot more optimized when there
are a bunch of streams.


Also, I much prefer the slimmer size of the stream in the original version.
Luckily stream expansion can come in handy with this.
I can have the stream actually indivdually expanding and contracting while still in physics mode.
And then when physics mode dies the stream itself is what determines the weight growth over time.


https://open.spotify.com/track/7xXQh52SZq9Af2DHQ4GNHI?si=d2d25e47fe434074



Good god, I think reading through my code gave me inspiration for a new input philosophy!

Basically, instead of objects reading inputs to move like the player, instead
a dedicated input device gives objects like the player commands.


Imagine if the entirety of the player's motion is on a ginroous sphere, such that you
can actually see other people's paths below you.
