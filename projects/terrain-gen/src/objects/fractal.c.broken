#include <math.h>
#include <GLES2/gl2.h>

#include "../main.h"
#include "fractal.h"
#include "../core/input.h"


extern GLint fractal_program;


FRACTAL* FRACTAL_init(FRACTAL* self, vec2 window[2], vec3 pos) {
    static int id_counter;
    *self = (FRACTAL){
        .model = (MODEL){
            .color = {
                .r = FRAND(),
                .g = FRAND(),
                .b = FRAND(),
                .w = 1.0,
            },
            .id = id_counter++,
            .mesh = (MESH*)&self->mesh,
            .visable = true,
            .drawtype = DRAWTYPE_2D_PLAIN,
            .update_call = NULL,
            .shader_prog = fractal_program,
            .view_mat = GLM_MAT4_IDENTITY_INIT,
        },
        .x = pos[0],
        .y = pos[1],
        .zoom = pos[2],
    };

    self->mesh.verts = 4;
    self->mesh.mode =  GL_TRIANGLE_FAN;

    vec2 p1 = (vec2){window[0][0], window[0][1]};
    vec2 p2 = (vec2){window[1][0], window[0][1]};
    vec2 p3 = (vec2){window[1][0], window[1][1]};
    vec2 p4 = (vec2){window[0][0], window[1][1]};
    
    glm_vec2_copy(p1, self->mesh.v2[0]);
    glm_vec2_copy(p2, self->mesh.v2[1]);
    glm_vec2_copy(p3, self->mesh.v2[2]);
    glm_vec2_copy(p4, self->mesh.v2[3]);
    
    MODEL_init(&self->model);

    return self;
}





FRACTAL* FRACTAL_update(FRACTAL* self, double t, float dt) {

    float speed = MOVE_SPEED/pow(ZOOM_BASE, self->zoom);
    float rx = 0;
    float ry = 0;

    if (key[KEY_D] == KEYDOWN) rx += speed;
    if (key[KEY_A] == KEYDOWN) rx -= speed;
    if (key[KEY_W] == KEYDOWN) ry += speed;
    if (key[KEY_S] == KEYDOWN) ry -= speed;

    if (key[KEY_UP]    == KEYDOWN) self->zoom += ZOOM_SPEED;
    if (key[KEY_DOWN]  == KEYDOWN) self->zoom -= ZOOM_SPEED;
    if (key[KEY_RIGHT] == KEYDOWN) self->rot  += ROT_SPEED;
    if (key[KEY_LEFT]  == KEYDOWN) self->rot  -= ROT_SPEED;

    self->x += rx*cos(self->rot) + ry*sin(self->rot);
    self->y += rx*sin(self->rot) - ry*cos(self->rot);

    MODEL_update(&self->model, t, dt);

    return self;
}




extern int swidth, sheight;


FRACTAL* FRACTAL_draw(FRACTAL* self, double t) {
    glUseProgram(self->model.shader_prog);

    float scale = 1.0/pow(ZOOM_BASE, self->zoom);
    
    GLint u_pos_loc  = glGetUniformLocation(self->model.shader_prog, "u_pos");
    GLint u_zoom_loc = glGetUniformLocation(self->model.shader_prog, "u_scale");
    GLint u_rot_loc  = glGetUniformLocation(self->model.shader_prog, "u_rot");
    GLint u_width_loc  = glGetUniformLocation(self->model.shader_prog, "u_width");
    GLint u_height_loc = glGetUniformLocation(self->model.shader_prog, "u_height");
    
    glUniform2f( u_pos_loc,    (GLfloat)self->x,     (GLfloat)self->y );
    glUniform1f( u_zoom_loc,   (GLfloat)scale     );
    glUniform1f( u_rot_loc,    (GLfloat)self->rot );
    glUniform1f( u_width_loc,  (GLfloat)swidth    );
    glUniform1f( u_height_loc, (GLfloat)sheight   );
    
    MODEL_draw(&self->model);

    return self;
}
