#include <GLES2/gl2.h>

#include "bezier.h"
#include "../main.h"

extern GLuint bezier_program;
extern GLuint point_program;


void _BEZIER_hover(BEZIER* self, int index);
void _BEZIER_click(BEZIER* self, int index);
void _BEZIER_right_click(BEZIER* self, int index);


//void model_transform(MODEL* model);
void drawpoints(GLuint vert_buff, vec3* points, int len, vec4 color);
// absolutely vile function
GLuint pointsinit(void);






void BEZIER_init(BEZIER* self, vec3 point[4], bool linemode) {
    /*printf("point 1 %f, %f, %f\n", point[0][0], point[0][1], point[0][2]);
    printf("point 2 %f, %f, %f\n", point[1][0], point[1][1], point[1][2]);
    printf("point 3 %f, %f, %f\n", point[2][0], point[2][1], point[2][2]);
    printf("point 4 %f, %f, %f\n", point[3][0], point[3][1], point[3][2]);*/
    static int id_counter;
    *self = (BEZIER){
        // goes unused for now in favor of mesh verts
        .point = {
            {point[0][0], point[0][1], point[0][2]},
            {point[1][0], point[1][1], point[1][2]},
            {point[2][0], point[2][1], point[2][2]},
            {point[3][0], point[3][1], point[3][2]},
        },
        // TODO: find out why this errors
        /*.mesh = (MESH(_BEZIER_RESOLUTION)){
            .verts = _BEZIER_RESOLUTION,
            .mode = GL_LINE_STRIP,
        },*/
        .model = (MODEL){
            .color = {
                .r = FRAND(),
                .g = FRAND(),
                .b = FRAND(),
                .w = 1.0,
            },
            .id = id_counter++,
            .mesh = (MESH*)&self->mesh,
            .visable = true,
            .drawtype = DRAWTYPE_1D,
            .update_call = NULL,
            .shader_prog = bezier_program,
            .view_mat = GLM_MAT4_IDENTITY_INIT,
        },
        .linemode = linemode,
    };

    self->mesh.verts = _BEZIER_RESOLUTION;
    self->mesh.mode = GL_LINE_STRIP;
    //self->mesh.mode = GL_POINTS;

    for (int i = 0; i < _BEZIER_RESOLUTION; i++)
        self->mesh.v1[i] = (float)i;

    //for (int i = 0; i < LENOF(point); i++)
    //    glm_vec3_copy(point[i], self->mesh.v3[i]);

    for (int i = 0; i < 4; i++) {
        glm_vec3_copy(VEC3_RANDRANGE(-0.003, 0.003), self->vel[i]);
    }

    MODEL_init(&self->model);

    self->point_vert_buff = pointsinit();
}


void BEZIER_draw(BEZIER* self, double t) {
    glUseProgram(self->model.shader_prog);
    GLint u_points_loc = glGetUniformLocation(self->model.shader_prog, "u_points");
    GLint u_color_loc = glGetUniformLocation(self->model.shader_prog, "u_color");
    //printf("%d, %d\n", u_points_loc, u_color_loc);
    glUniform3fv(u_points_loc, 4, (GLfloat*)self->point);
    MODEL_draw(&self->model);
    drawpoints(self->point_vert_buff, self->point, 4, self->model.color.raw);
}


void BEZIER_update(BEZIER* self, double t, float dt) {

    for (int i = 0; i < 4; i++) {
        glm_vec3_add(self->point[i], self->vel[i], self->point[i]);

        float x = self->point[i][0];
        float y = self->point[i][1];
        float z = self->point[i][2];

        // TODO: vectorize this math rather than expand and evaluate
        if (x > wmax[0]) self->vel[i][0] = -ABS(self->vel[i][0]);
        if (x < wmin[0]) self->vel[i][0] =  ABS(self->vel[i][0]);
        if (y > wmax[1]) self->vel[i][1] = -ABS(self->vel[i][1]);
        if (y < wmin[1]) self->vel[i][1] =  ABS(self->vel[i][1]);
        if (z > wmax[0]) self->vel[i][2] = -ABS(self->vel[i][2]);
        if (z < wmin[0]) self->vel[i][2] =  ABS(self->vel[i][2]);
    }

    MODEL_update(&self->model, t, dt);
}


void _BEZIER_hover(BEZIER* self, int index) {
    return;
}

void _BEZIER_click(BEZIER* self, int index) {
    return;
}

void _BEZIER_right_click(BEZIER* self, int index) {
    return;
}





GLuint pointsinit(void) {
    GLuint vert_buff;
    glGenBuffers(1, &vert_buff);
    return vert_buff;
}



// sometimes, you just have to do things the hard and inefficient way.
void drawpoints(GLuint vert_buff, vec3* points, int len, vec4 color) {

    // select program to use
    glUseProgram(point_program);

    // TODO: how do I switch meshes without needing to reupload the mesh data?
    // maybe bind buffer without another call to buffer data
    // actually, yeah. That does make sense.
    glBindBuffer(GL_ARRAY_BUFFER, vert_buff);
    glBufferData(
        GL_ARRAY_BUFFER,
        (GLsizeiptr)len*sizeof(vec3),
        (GLfloat*)points,
        GL_STATIC_DRAW,
    );

    GLint vert_pos_loc  = glGetAttribLocation( point_program, "vert_pos"  );
    GLint u_mod_mat_loc = glGetUniformLocation(point_program, "u_mod_mat" );
    GLint u_color_loc   = glGetUniformLocation(point_program, "u_color"   );

    //printf("locs %d, %d, %d\n", vert_pos_loc, u_mod_mat_loc, u_color_loc);

    glVertexAttribPointer(
        vert_pos_loc,
        3,
        GL_FLOAT,
        GL_FALSE,
        0*sizeof(GLfloat),
        (void*)0            // offset from vertex. The cast is confusing
    );

    glEnableVertexAttribArray(vert_pos_loc);

    glUniformMatrix4fv(u_mod_mat_loc, 1, GL_FALSE, (GLfloat*)GLM_MAT4_IDENTITY);
    glUniform4fv(u_color_loc, 1, color);

    glDrawArrays(GL_POINTS, 0, len);
}
