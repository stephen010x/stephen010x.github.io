#!/usr/bin/python3

import sys
import os

fname = "macros_ext.h"
start = 2**8
stop = 2**16

load_len = 40

sname = os.path.basename(sys.argv[0])
if len(sys.argv) == 4:
    fname = str(sys.argv[1])
    start = int(sys.argv[2])
    stop = int(sys.argv[3])
elif len(sys.argv) != 1:
    if sys.argv[1] == "help":
        print(f"\n{sname} - macro number generator\n\n")
        print(f"\t{sname} help\n\t\t\tdisplay this list of commands\n")
        print(f"\t{sname} [output file] [start] [stop]\n\t\t\tgenerate file through custom parameters\n")
        print(f"\t{sname}\n\t\t\tgenerate file through default parameters\n")
    else:
        print(f"use '{sname} help' to get a list of commands")
    exit()


def loading_bar(i, start, stop, length, div, off, force=False):
    if i%int(int((start-stop))/length*4*div)==0 or force:
        p = (i - start)/(stop-start-1)/div + off/div
        l = length
        print('['+'*'*int(p*l)+' '*(l-int(p*l))+'] '+str(i-start)+'/'+str(stop-start))
    

with open(fname, 'w') as file:
    string = "#ifndef MACRO_EXTENSIONS_H\n#define MACRO_EXTENSIONS_H\n"
    file.write(string)

    # normal number generation
    for i in range(start, stop):
        hexval = hex(i)[2:].zfill(len(hex(stop-1)[2:]))
        hexfor = "".join([n+',' for n in hexval[:-1]]) + hexval[-1] 
        string = f"#define _B_{i} {hexfor}\n"
        file.write(string)
        loading_bar(i, start, stop, load_len, 3, 0)

    # hex number generation
    for i in range(start, stop):
        hexval = hex(i)[2:].zfill(len(hex(stop-1)[2:]))
        hexfor = "".join([n+',' for n in hexval[:-1]]) + hexval[-1] 
        string = f"#define _B_{hex(i)} {hexfor}\n"
        file.write(string)
        loading_bar(i, start, stop, load_len, 3, 1)

    # loop macro generation
    for i in range(start, stop):
        # TODO: add loop mechanism here
        loading_bar(i, start, stop, load_len, 3, 2)
    
    string = "#endif\n"
    file.write(string)
    loading_bar(stop, start, stop, load_len, 3, 2, True)
    #print('['+'*'*40+'] '+str(stop-start)+'/'+str(stop-start))
